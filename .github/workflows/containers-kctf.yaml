name: Deploy containers to kCTF

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  main:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4.2.2

      - name: Setup kCTF
        run: |
          curl -sSL https://kctf.dev/sdk | tar xz

          mkdir kctf/config
          echo "${{ vars.KCTF_CONFIG }}" > kctf/config/.lastconfig
          source kctf/config/.lastconfig
          echo "KCTF_CLUSTER=projects/$PROJECT/locations/$ZONE/clusters/$CLUSTER_NAME" >> $GITHUB_ENV
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.KCTF_IDENTITY }}
      - uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.KCTF_CLUSTER }}
      - name: Setup container registry
        run: gcloud auth configure-docker ${{ env.REGISTRY }}

      # based on https://github.com/google/kctf/blob/5d0f830d6adae029322570601f145a1866a50669/.github/workflows/update-images.yaml#L295C5-L329C13
      - name: Deploy containers
        run: |
          docker() {
            if [ "$1" = "build" ]; then
              command docker buildx build --cache-from type=gha --cache-to type=gha,mode=max "${@:2}"
            else
              command docker "$@"
            fi
          }

          source kctf/activate
          shopt -s extglob
          for template in !(kctf)/*/; do
            pushd $template
              if [[ ! -e "challenge.yaml" ]]; then
                continue
              fi
              if [[ -e "challenge/Makefile" ]]; then
                make -C "challenge"
              fi
              CHALLENGE_NAME="$("${KCTF_BIN}/yq" eval '.metadata.name' challenge.yaml)"
              echo "starting challenge ${CHALLENGE_NAME}"
              kctf chal start
              echo "challenge started, waiting for it to become available"
              # We want to wait for the deployment to be available, but it
              # might not have been created yet by the operator and wait will fail.
              # So try to "kubectl get" the challenge a few times to make sure it exists.
              # Ideally, we would expose the condition in the operator but I
              # don't think that's currently possible.
              for i in {1..5}; do
                kubectl get "deployment/${CHALLENGE_NAME}" && break
                echo "deployment/${CHALLENGE_NAME} doesn't exist yet, sleeping"
                sleep 5
              done
              kubectl wait --for=condition=available --timeout=5m "deployment/${CHALLENGE_NAME}"
            popd
          done

      - name: Setup GitHub container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push container images to GitHub
        run: |-
          images=$(docker images $REGISTRY/*:latest --format "{{.Repository}}")
          for image in $images; do
            lowercase=${GITHUB_REPOSITORY_OWNER,,}
            newtag=${image//$REGISTRY/ghcr\.io\/$lowercase}:latest
            docker tag $image:latest $newtag
            docker push $newtag
          done
        env:
          REGISTRY: ${{ env.REGISTRY }}
